"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = void 0;
const command_1 = require("../command");
const projectUtils_1 = require("../projectUtils");
const error_1 = require("../error");
const requireAuth_1 = require("../requireAuth");
const secretManager = require("../gcp/secretManager");
const requirePermissions_1 = require("../requirePermissions");
const apphosting = require("../gcp/apphosting");
const secrets = require("../apphosting/secrets");
exports.command = new command_1.Command("apphosting:secrets:grantaccess <secretName>")
    .description("grant service accounts permissions to the provided secret")
    .option("-l, --location <location>", "app backend location")
    .option("-b, --backend <backend>", "app backend name")
    .before(requireAuth_1.requireAuth)
    .before(secretManager.ensureApi)
    .before(apphosting.ensureApiEnabled)
    .before(requirePermissions_1.requirePermissions, [
    "secretmanager.secrets.create",
    "secretmanager.secrets.get",
    "secretmanager.secrets.update",
    "secretmanager.versions.add",
    "secretmanager.secrets.getIamPolicy",
    "secretmanager.secrets.setIamPolicy",
])
    .action(async (secretName, options) => {
    const projectId = (0, projectUtils_1.needProjectId)(options);
    const projectNumber = await (0, projectUtils_1.needProjectNumber)(options);
    if (!options.location) {
        throw new error_1.FirebaseError("Missing required flag --location. See firebase apphosting:secrets:grantaccess --help for more info");
    }
    const location = options.location;
    if (!options.backend) {
        throw new error_1.FirebaseError("Missing required flag --backend. See firebase apphosting:secrets:grantaccess --help for more info");
    }
    const exists = await secretManager.secretExists(projectId, secretName);
    if (!exists) {
        throw new error_1.FirebaseError(`Cannot find secret ${secretName}`);
    }
    const backendId = options.backend;
    const backend = await apphosting.getBackend(projectId, location, backendId);
    const accounts = secrets.toMulti(secrets.serviceAccountsForBackend(projectNumber, backend));
    await secrets.grantSecretAccess(projectId, secretName, accounts);
});
