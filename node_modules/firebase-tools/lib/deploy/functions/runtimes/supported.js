"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.guardVersionSupport = exports.isDecommissioned = exports.latest = exports.runtimeIsLanguage = exports.isRuntime = exports.RUNTIMES = void 0;
const error_1 = require("../../../error");
const utils = require("../../../utils");
function runtimes(r) {
    return r;
}
exports.RUNTIMES = runtimes({
    nodejs6: {
        friendly: "Node.js 6",
        status: "decommissioned",
        deprecationDate: "2019-04-17",
        decommissionDate: "2020-08-01",
    },
    nodejs8: {
        friendly: "Node.js 8",
        status: "decommissioned",
        deprecationDate: "2020-06-05",
        decommissionDate: "2021-02-01",
    },
    nodejs10: {
        friendly: "Node.js 10",
        status: "GA",
        deprecationDate: "2024-01-30",
        decommissionDate: "2025-01-30",
    },
    nodejs12: {
        friendly: "Node.js 12",
        status: "GA",
        deprecationDate: "2024-01-30",
        decommissionDate: "2025-01-30",
    },
    nodejs14: {
        friendly: "Node.js 14",
        status: "GA",
        deprecationDate: "2024-01-30",
        decommissionDate: "2025-01-30",
    },
    nodejs16: {
        friendly: "Node.js 16",
        status: "GA",
        deprecationDate: "2024-01-30",
        decommissionDate: "2025-01-30",
    },
    nodejs18: {
        friendly: "Node.js 18",
        status: "GA",
        deprecationDate: "2025-04-30",
        decommissionDate: "2025-10-31",
    },
    nodejs20: {
        friendly: "Node.js 20",
        status: "GA",
        deprecationDate: "2026-04-30",
        decommissionDate: "2026-10-31",
    },
    python310: {
        friendly: "Python 3.10",
        status: "GA",
        deprecationDate: "2026-10-04",
        decommissionDate: "2027-04-30",
    },
    python311: {
        friendly: "Python 3.11",
        status: "GA",
        deprecationDate: "2027-10-24",
        decommissionDate: "2028-04-30",
    },
    python312: {
        friendly: "Python 3.12",
        status: "GA",
        deprecationDate: "2028-10-02",
        decommissionDate: "2029-04-30",
    },
});
function isRuntime(maybe) {
    return maybe in exports.RUNTIMES;
}
exports.isRuntime = isRuntime;
function runtimeIsLanguage(runtime, language) {
    return runtime.startsWith(language);
}
exports.runtimeIsLanguage = runtimeIsLanguage;
function latest(language, runtimes = Object.keys(exports.RUNTIMES)) {
    const sorted = runtimes
        .filter((s) => runtimeIsLanguage(s, language))
        .sort((left, right) => {
        const leftVersion = +left.substring(language.length);
        const rightVersion = +right.substring(language.length);
        if (isNaN(leftVersion) || isNaN(rightVersion)) {
            throw new error_1.FirebaseError("Internal error. Runtime or language names are malformed", {
                exit: 1,
            });
        }
        return leftVersion - rightVersion;
    });
    const latest = utils.last(sorted);
    if (!latest) {
        throw new error_1.FirebaseError(`Internal error trying to find the latest supported runtime for ${language}`, { exit: 1 });
    }
    return latest;
}
exports.latest = latest;
function isDecommissioned(runtime, now = new Date()) {
    const cutoff = new Date(exports.RUNTIMES[runtime].decommissionDate);
    return cutoff < now;
}
exports.isDecommissioned = isDecommissioned;
function guardVersionSupport(runtime, now = new Date()) {
    const { deprecationDate, decommissionDate } = exports.RUNTIMES[runtime];
    const decommission = new Date(decommissionDate);
    if (now >= decommission) {
        throw new error_1.FirebaseError(`Runtime ${exports.RUNTIMES[runtime].friendly} was decommissioned on ${decommissionDate}. To deploy ` +
            "you must first upgrade your runtime version.", { exit: 1 });
    }
    const deprecation = new Date(deprecationDate);
    if (now >= deprecation) {
        utils.logLabeledWarning("functions", `Runtime ${exports.RUNTIMES[runtime].friendly} was deprecated on ${deprecationDate} and will be ` +
            `decommissioned on ${decommissionDate}, after which you will not be able ` +
            "to deploy without upgrading. Consider upgrading now to avoid disruption. See " +
            "https://cloud.google.com/functions/docs/runtime-support for full " +
            "details on the lifecycle policy");
        return;
    }
    const warning = new Date(deprecation.getTime() - 90 * 24 * 60 * 60 * 1000);
    if (now >= warning) {
        utils.logLabeledWarning("functions", `Runtime ${exports.RUNTIMES[runtime].friendly} will be deprecated on ${deprecationDate} and will be ` +
            `decommissioned on ${decommissionDate}, after which you will not be able ` +
            "to deploy without upgrading. Consider upgrading now to avoid disruption. See " +
            "https://cloud.google.com/functions/docs/runtime-support for full " +
            "details on the lifecycle policy");
    }
}
exports.guardVersionSupport = guardVersionSupport;
